<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloudok.uc.mapper.MemberMapper">
	<resultMap extends="memberMap"
		type="com.cloudok.uc.po.LinkMemberPO" id="linkMemberMap">

		<result property="to" column="to" />

		<result property="from" column="from" />

	</resultMap>
<!-- 
	<select id="friend"
		parameterType="com.cloudok.core.query.QueryBuilder"
		resultMap="linkMemberMap">

		select
		(t1.id is not null ) as `from`,
		(t2.id is not null ) as `to`,
		<include refid="columns"></include>
		from uc_member t
		left join uc_recognized t1 on t1.source_id = t.id and t1.target_id =
		#{parameters.memberId} and t1.deleted = false
		left join uc_recognized t2 on t2.target_id = t.id and t2.source_id =
		#{parameters.memberId} and t2.deleted = false
		<where>
			<if test="parameters.type == 0">
				t1.id is not null and t2.id is not null and
			</if>
			<if test="parameters.type == 1">
				t2.id is not null and 
			</if>
			<if test="parameters.type == 2">
				t1.id is not null and
			</if>
			<if test="parameters.type == 3">
				t1.read = false and
			</if>
			<include
				refid="com.cloudok.core.mybatis.BaseMapper.condition" />
		</where>
	</select>

	<select id="friendCount"
		parameterType="com.cloudok.core.query.QueryBuilder" resultType="Long">
		select
		count(1)
		from uc_member t
		left join uc_recognized t1 on t1.source_id = t.id and t1.target_id =
		#{parameters.memberId} and t1.deleted = false
		left join uc_recognized t2 on t2.target_id = t.id and t2.source_id =
		#{parameters.memberId} and t2.deleted = false
		<where>
			<if test="parameters.type == 0">
				t1.id is not null and t2.id is not null and
			</if>
			<if test="parameters.type == 1">
				t2.id is not null and
			</if>
			<if test="parameters.type == 2">
				t1.id is not null and
			</if>
			<if test="parameters.type == 3">
				t1.read = false and
			</if>
			<include
				refid="com.cloudok.core.mybatis.BaseMapper.condition" />
		</where>

	</select>

	<select id="queryLinkMember"
		parameterType="com.cloudok.core.query.QueryBuilder"
		resultMap="linkMemberMap">
		select
		(t1.id is not null ) as `from`,
		(t2.id is not null ) as `to`,
		<include refid="columns"></include>
		from uc_member t
		left join uc_recognized t1 on t1.source_id = t.id and
		t1.target_id = #{parameters.memberId} and t1.deleted = false
		left join
		uc_recognized t2 on t2.target_id = t.id and t2.source_id =
		#{parameters.memberId} and t2.deleted = false
		<where>
			<if test="parameters.ignore">
				(t1.id is null or t2.id is null) and
			</if>
			t.id != #{parameters.memberId} and
			<include
				refid="com.cloudok.core.mybatis.BaseMapper.condition" />
		</where>
	</select>
 -->
	<!-- <select id="queryFriends"
		parameterType="com.cloudok.core.query.QueryBuilder"
		resultMap="linkMemberMap">
		select
		(t1.id is not null ) as `from`,
		(t2.id is not null ) as `to`,
		<include refid="columns"></include>
		from uc_member t
		left join uc_recognized t1 on t1.source_id = t.id and
		t1.target_id = #{parameters.memberId} and t1.deleted = false
		left join
		uc_recognized t2 on t2.target_id = t.id and t2.source_id =
		#{parameters.memberId} and t2.deleted = false
		<where>
			t1.id is not null and t2.id is not null and
			t.id !=
			#{parameters.memberId} and
			<include
				refid="com.cloudok.core.mybatis.BaseMapper.condition" />
		</where>
	</select> -->
<!-- 
	<select id="countQueryLinkMember"
		parameterType="com.cloudok.core.query.QueryBuilder" resultType="long">
		select
		count(1)
		from uc_member t
		left join uc_recognized t1 on
		t1.source_id = t.id and t1.target_id = #{parameters.memberId} and
		t1.deleted = false
		left join uc_recognized t2 on t2.target_id = t.id
		and t2.source_id = #{parameters.memberId} and t2.deleted = false
		<where>
			<if test="parameters.ignore">
				(t1.id is null or t2.id is null) and
			</if>
			t.id != #{parameters.memberId} and
			<include
				refid="com.cloudok.core.mybatis.BaseMapper.condition" />
		</where>
	</select>
	 -->
	
	<resultMap  type="com.cloudok.uc.po.SuggsetMemberScorePO" id="suggsetMemberScoreMap">
		<result property="id" column="id"/>
		<result property="score" column="score"/>
	</resultMap>
	
	
	
	<select id="suggest" parameterType="map" resultMap="suggsetMemberScoreMap">
		select t.id, wi+ti+10  as score from uc_member t
		where t.deleted=false 
		<if test="excludedIdList != null">
			and t.id not in 
			<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="filterType ==1">
			and exists (select 1 from uc_research_experience re where re.member_id = t.id and re.deleted=false)
		</if>
		<if test="filterType ==2">
			and exists (select 1 from uc_internship_experience re where re.member_id = t.id and re.deleted=false) 
		</if>
		<if test="filterType ==3">
			and exists (select 1 from uc_member_tags re , base_tag bt 
				where bt.id = re.tag_id and bt.category='personality' and  re.member_id = t.id and re.type=2 and re.deleted=false  )
		</if>
		<if test="filterType ==4">
			and exists (select 1 from uc_member_tags re , base_tag bt 
				where bt.id = re.tag_id and bt.category='statement' and  re.member_id = t.id and re.type=2 and re.deleted=false  )
		</if>
		order by score desc
	</select>
	
	
	<resultMap  type="com.cloudok.uc.po.MemberCirclePO" id="memberCircleMap">
		<result property="memberId" column="id"/>
		<result property="lastUpdateTs" column="last_update_ts"/>
	</resultMap>
	
	<select id="getMemberCirclesList" parameterType="map" resultMap="memberCircleMap">
		select t1.id,t1.last_update_ts from (
			select u.id,
			<if test="type ==1">
				(select max(temp.update_ts) from uc_research_experience  temp where temp.member_id = u.id and temp.deleted = false and temp.domain_id=#{businessId}) as last_update_ts
			</if>
			<if test="type ==2">
				(select max(temp.update_ts) from  uc_internship_experience temp, base_industry bitemp  where temp.industry_id = bitemp.id and  temp.member_id = u.id and temp.deleted = false and bitemp.category=#{businessId} ) as last_update_ts
			</if>
			<if test="type ==3">
				(select max(temp.update_ts) from  uc_project_experience  temp where  temp.member_id = u.id   and temp.deleted = false and temp.category=#{businessId}) as last_update_ts
			</if>
			<if test="type ==4">
				(select max(temp.update_ts)  from uc_member_tags  temp where  temp.member_id = u.id   and temp.deleted = false and temp.tag_id=#{businessId}) as last_update_ts
			</if>
			<if test="type ==5">
				(select max(temp.update_ts)  from uc_member_tags  temp where  temp.member_id = u.id   and temp.deleted = false and temp.tag_id=#{businessId}) as last_update_ts
			</if>
			 from uc_member u where
				<if test="type ==1">
					EXISTS (select 1 from uc_research_experience  re where re.member_id = u.id and re.deleted = false and re.domain_id=#{businessId}) 
				</if>
				<if test="type ==2">
					EXISTS (select 1 from uc_internship_experience  re, base_industry bi  where re.industry_id = bi.id and  re.member_id = u.id and re.deleted = false and bi.category=#{businessId})
				</if>
				<if test="type ==3">
					EXISTS (select 1 from uc_project_experience  pe where  pe.member_id = u.id   and pe.deleted = false and pe.category=#{businessId})
				</if>
				<if test="type ==4">
					EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}) 
				</if>
				<if test="type ==5">
					EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}) 
				</if>
				<if test="excludedIdList != null">
					and u.id not in 
					<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</if>
				and u.deleted=false
				<if test="filterType == 0">
					and exists (select 1 from uc_recognized ttt where ttt.source_id = #{currentUserId} and u.id = ttt.target_id and ttt.deleted = false)
				</if> 
				<if test="filterType == 1">
					and not exists (select 1 from uc_recognized ttt where ttt.source_id = #{currentUserId} and u.id = ttt.target_id  and ttt.deleted = false)
				</if>
		) t1
		order by t1.last_update_ts desc
		limit #{offset},#{pageSize}
	</select>
	
	<select id="getMemberCirclesCount" parameterType="map" resultType="Long">
		select count(u.id) from uc_member u where
		<if test="type ==1">
			EXISTS (select 1 from uc_research_experience  re where re.member_id = u.id and re.deleted = false and re.domain_id=#{businessId}) 
		</if>
		<if test="type ==2">
			EXISTS (select 1 from uc_internship_experience  re, base_industry bi  where re.industry_id = bi.id and  re.member_id = u.id and re.deleted = false and bi.category=#{businessId})
		</if>
		<if test="type ==3">
			EXISTS (select 1 from uc_project_experience  pe where  pe.member_id = u.id   and pe.deleted = false and pe.category=#{businessId})
		</if>
		<if test="type ==4">
			EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}) 
		</if>
		<if test="type ==5">
			EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}) 
		</if>
		<if test="excludedIdList != null">
			and u.id not in 
			<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="filterType == 0">
			and exists (select 1 from uc_recognized ttt where ttt.source_id = #{currentUserId} and u.id = ttt.target_id and ttt.deleted = false)
		</if> 
		<if test="filterType == 1">
			and not exists (select 1 from uc_recognized ttt where ttt.source_id = #{currentUserId} and u.id = ttt.target_id  and ttt.deleted = false)
		</if>
		and u.deleted=false
	</select>

	
	
	
	
	<resultMap type="com.cloudok.uc.po.MemberSuggestScore" id="scoreMap">
		<result property="id" column="id" />
		<result property="suggestTs" column="suggest_ts" />
		<result property="updateTs" column="update_ts" />
		<result property="ownerId" column="owner_id" />
		<result property="targetId" column="target_id" />
		<result property="score" column="score" /> 
		<result property="industry" column="industry" /> 
		<result property="tag" column="tag" /> 
		<result property="specialism" column="specialism" /> 
		<result property="school" column="school" /> 
		<result property="recognized" column="recognized" /> 
	</resultMap>
	
	<update id="markAsSuggested" parameterType="Map">
		update uc_member_suggest set suggest_ts = CURRENT_TIMESTAMP() where 
		owner_id = #{ownerId} and
		target_id in 
		<foreach collection="targetIdList" close=")" item="item" open="(" separator=",">
				#{item}
		</foreach>
	</update>
	
	<insert id="createScoreList" parameterType="List">
		insert into uc_member_suggest (id,suggest_ts,update_ts,owner_id,target_id,score,industry,tag,specialism,school,kab,recognized) values
		<foreach collection="list"   item="item" separator=",">
			(#{item.id},null,CURRENT_TIMESTAMP(),#{item.ownerId},#{item.targetId},#{item.score},#{item.industry},#{item.tag},#{item.specialism},#{item.school},1,#{item.recognized})
		</foreach>
	
	</insert>	 
	
	<update id="updateScore"  parameterType="com.cloudok.uc.po.MemberSuggestScore">
		update uc_member_suggest
         set 
         	score=#{score},
         	industry=#{industry},
         	tag=#{tag},
         	specialism=#{specialism},
         	school=#{school},
         	recognized = #{recognized}
        where id  = #{id}
	</update> 
	
	<select id="getScoreByOwnerId" resultMap="scoreMap">
		select * from uc_member_suggest where owner_id in
        <foreach collection="idList" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach> 
	</select> 
	
	<select id="getScoreByOwnerIdAndTargetId" resultMap="scoreMap">
		select * from uc_member_suggest where owner_id =#{currentUserId} and target_id in
        <foreach collection="idList" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
	</select> 
	
	
	<select id="getUnSuggestList" resultMap="scoreMap">
		select * from uc_member_suggest where owner_id = #{currentUserId}  and score>-100  and suggest_ts is null  limit 0,100
	</select> 
	
	<update id="resetSuggestStatus" parameterType="Map">
		update uc_member_suggest set suggest_ts = null where owner_id = #{currentUserId}
	</update>

	<select id="getLastestSuggest" parameterType="Map" resultMap="scoreMap">
		select * from uc_member_suggest where owner_id = #{currentUserId}  
		and suggest_ts between concat(#{date},' 00:00:00') and concat(#{date},' 23:59:59')
		 order by suggest_ts desc limit 0, #{size}
	</select>
	
	<select id="suggestNew" parameterType="Map"  resultMap="scoreMap">
		select * from uc_member_suggest u where owner_id = #{currentUserId}  and score>-100
		<if test="ignoreSuggestStatus == false">
			and suggest_ts is null 
		</if>
		<if test="excludedIdList != null">
			and target_id not in 
			<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="filterType == 1">
			<if test="fallbackType == null">
				and specialism = 2 
			</if>
			<if test="fallbackType == 1">
				and specialism = 1 
			</if>
		</if>
		<if test="filterType == 2">
			<if test="fallbackType == null">
				and industry = 2	
			</if>
			<if test="fallbackType == 1">
				and industry  = 1
			</if>
		</if>
		<if test="filterType == 3">
			and tag = 1	 
		</if>
		<if test="filterType == 4">
			and school = 1	
		</if>
		<if test="ignoreRecognized == false">
			and not exists (select 1 from uc_recognized ttt where ttt.source_id = #{currentUserId} and ttt.target_id = u.target_id and ttt.deleted=false)
		</if>
		 order by score desc  limit 0, #{size}
	</select>
	
	<select id="getUnSuggestCount" parameterType="Map" resultType="Long">
		select count(1) from uc_member_suggest where owner_id = #{currentUserId}  and score>-100 and suggest_ts is null 
	</select>
	
	
	
	
	<select id="getMemberCirclesListV2" parameterType="map" resultMap="memberCircleMap">
		select t1.id,t1.last_update_ts from (
			select u.id,
			<if test="type ==1">
				(select max(temp.update_ts) from uc_research_experience  temp where temp.member_id = u.id and temp.deleted = false and temp.domain_id=#{businessId}) as last_update_ts
			</if>
			<if test="type ==2">
				(select max(temp.update_ts) from  uc_internship_experience temp, base_industry bitemp  where temp.industry_id = bitemp.id and  temp.member_id = u.id and temp.deleted = false and bitemp.category=#{businessId} ) as last_update_ts
			</if>
			<if test="type ==3">
				(select max(temp.update_ts) from  uc_project_experience  temp where  temp.member_id = u.id   and temp.deleted = false and temp.category=#{businessId}) as last_update_ts
			</if>
			<if test="type ==4">
				(select max(temp.update_ts)  from uc_member_tags  temp where  temp.member_id = u.id   and temp.deleted = false and temp.tag_id=#{businessId}   and temp.type='2') as last_update_ts
			</if>
			<if test="type ==5">
				(select max(temp.update_ts)  from uc_member_tags  temp where  temp.member_id = u.id   and temp.deleted = false and temp.tag_id=#{businessId}   and temp.type='2') as last_update_ts
			</if>
			<if test="type ==0">
				(select max(temp.update_ts)  from uc_member_tags  temp where  temp.member_id = u.id   and temp.deleted = false and temp.tag_id=#{businessId}   and temp.type='3') as last_update_ts
			</if>
			<if test="type ==6">
				(select max(temp.update_ts)  from uc_education_experience  temp where  temp.member_id = u.id   and temp.deleted = false and temp.school_id=#{businessId} ) as last_update_ts
			</if>
			<if test="type ==7">
				(select max(temp.update_ts)  from uc_education_experience  temp where  temp.member_id = u.id   and temp.deleted = false and temp.specialism_id=#{businessId} ) as last_update_ts
			</if>
			 from uc_member u where
				<if test="type ==1">
					EXISTS (select 1 from uc_research_experience  re where re.member_id = u.id and re.deleted = false and re.domain_id=#{businessId}) 
				</if>
				<if test="type ==2">
					EXISTS (select 1 from uc_internship_experience  re, base_industry bi  where re.industry_id = bi.id and  re.member_id = u.id and re.deleted = false and bi.category=#{businessId})
				</if>
				<if test="type ==3">
					EXISTS (select 1 from uc_project_experience  pe where  pe.member_id = u.id   and pe.deleted = false and pe.category=#{businessId})
				</if>
				<if test="type ==4">
					EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}  and mt.type='2') 
				</if>
				<if test="type ==5">
					EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}  and mt.type='2') 
				</if>
				<if test="type ==0">
					EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId} and mt.type='3') 
				</if>
				<if test="type ==6">
					EXISTS (select 1 from uc_education_experience  mt where  mt.member_id = u.id   and mt.deleted = false and mt.school_id=#{businessId}  ) 
				</if>
				<if test="type ==7">
					EXISTS (select 1 from uc_education_experience  mt where  mt.member_id = u.id   and mt.deleted = false and mt.specialism_id=#{businessId} ) 
				</if>
				<if test="excludedIdList != null">
					and u.id not in 
					<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
						#{item}
					</foreach>
				</if>
				and u.deleted=false
		) t1
		order by t1.last_update_ts desc
		limit #{offset},#{pageSize}
	</select>
	
	<select id="getMemberCirclesCountV2" parameterType="map" resultType="Long">
		select count(u.id) from uc_member u where
		<if test="type ==1">
			EXISTS (select 1 from uc_research_experience  re where re.member_id = u.id and re.deleted = false and re.domain_id=#{businessId}) 
		</if>
		<if test="type ==2">
			EXISTS (select 1 from uc_internship_experience  re, base_industry bi  where re.industry_id = bi.id and  re.member_id = u.id and re.deleted = false and bi.category=#{businessId})
		</if>
		<if test="type ==3">
			EXISTS (select 1 from uc_project_experience  pe where  pe.member_id = u.id   and pe.deleted = false and pe.category=#{businessId})
		</if>
		<if test="type ==4">
			EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}   and mt.type='2') 
		</if>
		<if test="type ==5">
			EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}   and mt.type='2') 
		</if>
		<if test="type ==0">
			EXISTS (select 1 from uc_member_tags  mt where  mt.member_id = u.id   and mt.deleted = false and mt.tag_id=#{businessId}   and mt.type='3') 
		</if>
		<if test="type ==6">
			EXISTS (select 1 from uc_education_experience  mt where  mt.member_id = u.id   and mt.deleted = false and mt.school_id=#{businessId}  ) 
		</if>
		<if test="type ==7">
			EXISTS (select 1 from uc_education_experience  mt where  mt.member_id = u.id   and mt.deleted = false and mt.specialism_id=#{businessId} ) 
		</if>
		<if test="excludedIdList != null">
			and u.id not in 
			<foreach collection="excludedIdList" close=")" item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		and u.deleted=false
	</select>
	
	<update id="updateKAB" parameterType="Map">
		update uc_member_suggest set kab=kab*0.85,suggest_ts = CURRENT_TIMESTAMP() where owner_id = #{currentUserId} and target_id in 
			<foreach collection="memberIdList" close=")" item="item" open="(" separator=",">
				#{item}
			</foreach>
	</update>
	
	<select id="getSuggestV3Count" parameterType="map" resultType="Long">
		select count(1) from uc_member_suggest where owner_id = #{currentUserId}  and score>-100 
	</select>
	<select id="getSuggestV3List" parameterType="map" resultMap="scoreMap">
		select  t.id,t.suggest_ts,t.update_ts,t.owner_id,t.target_id,(t.score+m.wi) * t.kab as score,t.specialism,t.industry,t.tag,t.school,t.kab,t.recognized 
			from uc_member_suggest t 
			inner join uc_member m on t.target_id=m.id and  t.owner_id = #{currentUserId} and m.deleted=false  and t.score>-100  
		order by recognized asc, (t.score+m.wi) * t.kab desc, t.target_id desc limit #{offset},#{pageSize}
	</select>
	<select id="getShouldFxixedRecognizedSize" resultType="Long">
		SELECT count(1) FROM uc_member_suggest t where t.recognized is null and t.score>-100
	</select>
	<select id="getSuggestTotal" resultType="Long">
		SELECT count(1) FROM uc_member_suggest t
	</select>
	
	<update id="resetOtherMemberOpenId" parameterType="Map">
		update uc_member set open_id=null where open_id=#{openId}
	</update>
	<update id="bindOpenId" parameterType="Map">
		update uc_member set open_id=#{openId} where id=#{currentUserId}
	</update>
	<update id="unbindOpenId" parameterType="Map">
		update uc_member set open_id=null where id=#{currentUserId}
	</update>
</mapper>