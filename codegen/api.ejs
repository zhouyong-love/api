package <%-package%>.<%-modular%>.api;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import javax.validation.Valid;
import org.springframework.security.access.prepost.PreAuthorize;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.cloudok.core.query.QueryBuilder;
import com.cloudok.core.vo.Response;
import <%-package%>.<%-modular%>.mapping.<%-className%>Mapping;
import <%-package%>.<%-modular%>.service.<%-className%>Service;
import <%-package%>.<%-modular%>.vo.<%-className%>VO;

@RestController
@RequestMapping("/v1/<%-modular%>/<%-propertyName%>")
@Api(tags = "<%-describe%>")
public class <%=className%>Api {

	@Autowired
	private <%-className%>Service <%-propertyName%>Service;

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write')")
	@PostMapping
	@ApiOperation(value = "添加<%-describe%>", notes = "添加<%-describe%>")
	public Response create(@RequestBody @Valid <%-className%>VO vo) {
		return Response.buildSuccess(<%-propertyName%>Service.create(vo));
	}

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write') or hasAuthority('interface.<%-propertyName%>.read')")
	@GetMapping
	@ApiOperation(value = "查询<%-describe%>列表", notes = "查询<%-describe%>列表")
	public Response search(HttpServletRequest request) {
		return Response.buildSuccess(<%-propertyName%>Service.page(QueryBuilder.create(<%-className%>Mapping.class).with(request)));
	}

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write')")
	@PutMapping("/{id}")
	@ApiOperation(value = "修改<%-describe%>", notes = "修改<%-describe%>")
	public Response modify(@PathVariable("id") Long id,@RequestBody @Valid <%-className%>VO vo) {
		vo.setId(id);
		return Response.buildSuccess(<%-propertyName%>Service.update(vo));
	}

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write') or hasAuthority('interface.<%-propertyName%>.read')")
	@GetMapping("/{id}")
	@ApiOperation(value = "查询<%-describe%>", notes = "查询<%-describe%>")
	public Response modify(@PathVariable("id") Long id) {
		return Response.buildSuccess(<%-propertyName%>Service.get(id));
	}

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write')")
	@DeleteMapping("/{id}")
	@ApiOperation(value = "删除<%-describe%>", notes = "删除<%-describe%>")
	public Response remove(@PathVariable("id") Long id) {
		return Response.buildSuccess(<%-propertyName%>Service.remove(id));
	}

	@PreAuthorize("hasAuthority('interface.<%-propertyName%>.write')")
	@DeleteMapping
	@ApiOperation(value = "批量删除<%-describe%>", notes = "批量删除<%-describe%>")
	public Response removeList(List<Long> ids) {
		return Response.buildSuccess(<%-propertyName%>Service.remove(ids));
	}
}
